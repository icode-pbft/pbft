//
// Created by 18716 on 2019/8/1.
//

#include <pbftMain.h>
#include "aloneNodeController.h"

//map<int,bool> aloneNodeController::isVote;
Config aloneNodeController::configSettings;
int aloneNodeController::nodeNo=1;
vector<aloneNodeController*> aloneNodeController::nodes;
vector<Msg*> aloneNodeController::requestReadyList;
mutex aloneNodeController::mtx;
const int aloneNodeController::nodeSizeMax=100;

/**
 * ????????
 * @param msg
 */
void aloneNodeController::start(Msg *msg) {
    ////lock
  //  mtx.lock();
    int index=nodeIn(nodes,msg->getViewNo());
    putString("??????????"+to_string(nodes.size())+"----index=="+to_string(index)+"??????????????????????????"+msg->getType());
    if(-1==index){
        putString("???????????????????????????"+to_string(msg->getViewNo())+"??node");
        if(nodes.size()>=nodeSizeMax){
            putString("?????????????????????????????????");
            removeHalfNodes();
        }
        aloneNodeController* node=new aloneNodeController();
        node->setViewNo(msg->getViewNo());
        nodes.push_back(node);
        putString("??????????????:"+to_string(nodes.size()));

        node->action(msg);
        ////unlock
        //mtx.unlock();
        return;
    }


    nodes[index]->action(msg);
    ////unlock
    //mtx.unlock();
}

/**
 * ??????
 * @param msg
 */
void aloneNodeController::action(Msg *msg) {
    string msgType=msg->getType();
    if("confirm"==msgType&&!isConfirm){
        dealWithConfirm(msg);
    } else if (!isVote&&!isConfirm){
        pushReadMsg(this,msg);
    } else if("request"==msgType){
        dealWithRequest(msg);
    } else if ("ppMsg"==msgType){
        dealWithPpMsg(msg);
    } else if("pMsg"==msgType){
        dealWithPMsg(msg);
    } else if("commit"==msgType){
        dealWithCMsg(msg);
    }
}

/**
 * ????????????
 * @param nodeNo
 */
void aloneNodeController::init(int nodeNo) {
    aloneNodeController::nodeNo=nodeNo;
    const char ConfigFile[]= "../config/config.txt";
    Config config(ConfigFile);
    configSettings=config;
}

/**
 * ????hash???????string????
 * @param content
 * @return
 */
string aloneNodeController::getHashCode(string content) {
    hash<string> hashTest;
    return to_string(hashTest(content));
}

/**
 * ????confirm???
 * @param confirmMain
 */
void aloneNodeController::dealWithConfirm(Msg* confirmMain) {

    vector<int> chooseNodes=confirmMain->getChooseNodes();

    highLine=configSettings.Read("highLine",0);
    putString("highLine?:"+to_string(highLine));
    lowLine=configSettings.Read("lowLine",0);
    putString("lowLine?:"+to_string(lowLine));
    chooseSize=confirmMain->getChooseNodes().size();
    systemId = confirmMain->getSystemId();

    for (int i = 0; i < confirmMain->getChooseNodes().size(); ++i) {
        putString("???????:"+to_string(confirmMain->getChooseNodes().at(i)));
    }
    cout<<endl;
    ///????????????????
    if(somethingIn(chooseNodes, nodeNo)){
        putString(to_string(nodeNo)+"???????????");
        isVote= true;
        putString("????????"+to_string(confirmMain->getMainNode())+"??????????"+to_string(nodeNo));
        if(nodeNo==confirmMain->getMainNode()){
            putString("???????????");
            isMain=true;
            dealWithReadyRequest();
        } else{
            isMain=false;
            ////??????????pp???(???????§Ý?¦Ä??????????????pp????????)
            dealWithReadyPpMsg();
        }
    }else{
        putString(to_string(nodeNo)+"???????????.");
        isVote= false;
        return;
    }

    isConfirm = true;

}

/**
 * ????request???
 * @param confirmMain
 */
void aloneNodeController::dealWithRequest(Msg *request) {
    if(!isMain){
        putString("??????????");
        return;
    }
    if(somethingIn(requestList,request->getContent())){
        ////????????????????request
        putString("????????????????request");
        return;
    }
    requestList.push_back(request->getContent());
    putString("????request???");


    ////?????????pTims??cTimes??
    putString("?????pTims??cTimes");
    pTimes[times][0]=serialNo;
    cTimes[times][0]=serialNo;
    Msg* ppMsg=new Msg();
    ppMsg->setType("ppMsg");
    ppMsg->setViewNo(viewNo);
    ppMsg->setContent(request->getContent());
    ppMsg->setSerialNo(serialNo);
    ppMsg->setRemark(request->getRemark());
    ////???????pp????§Ò??????????????????????pp????????§Ü?
    ppMsgList.push_back(serialNo);

    ////????§Ü???
    serialNo+=1;
    times++;

    sendMsg(ppMsg);
    dealWithReadyPMsg(serialNo-1);

    //???????p???
//    Msg* pMsg=ppMsg;
//    pMsg->setType("pMsg");
//    sendMsg(pMsg);

}

/**
 * ????pp???
 * @param ppMsg
 */
void aloneNodeController::dealWithPpMsg(Msg* ppMsg) {
    if(!checkPpMsg(ppMsg)){
        putString("pp?????????");
        return;
    } else{

        putString("pp??????");
        ////??????§Ü?
        int serialNo=ppMsg->getSerialNo();

        ////???????????pTims??cTimes??
        pTimes[times][0]=serialNo;
        cTimes[times][0]=serialNo;
        times++;

        ////??????????§Ü??????????pp????§Ò???
        ppMsgList.push_back(ppMsg->getSerialNo());

        Msg* pMsg=ppMsg;
        pMsg->setType("pMsg");
        sendMsg(pMsg);

        ////?????????§Ü???????p???
        dealWithReadyPMsg(ppMsg->getSerialNo());
    }
}

/**
 * ????p???
 * @param pMsg
 */
void aloneNodeController::dealWithPMsg(Msg* pMsg) {

    putString("???????p???");
    if(!checkPMsg(pMsg)){
        putString("p?????????");
        return;
    } else{
        putString("p??????????????");

        int serialNo=pMsg->getSerialNo();

        ////????????pp????§Ò?????§Ø???????§Ü??
        if(!somethingIn(ppMsgList,serialNo)){
            putString("???????????pp???????request??????????p?????????????§Ò?,pMsgReadyList???§³"+to_string(pMsgReadyList.size()));
            pMsgReadyList.push_back(pMsg);
                return;
        }
        putString("p??????????????");

        ////??????????????p?????????
        pMsgNodeNos.push_back(to_string(pMsg->getSerialNo())+"&"+to_string(pMsg->getNodeNo()));

        ////?????????§Ü??p???????????2f??
        if(countMsg(pMsgNodeNos,pMsg->getSerialNo())==(chooseSize-1)/3*2){
            putString("?????????p???");
            pMsgList.push_back(serialNo);
            Msg* commit=pMsg;
            commit->setType("commit");
            sendMsg(commit);

            ////??????????commit???
            putString("???????c???");
            dealWithReadyCMsg(serialNo);
        }
    }
}

/**
 * ????c???
 * @param commit
 */
void aloneNodeController::dealWithCMsg(Msg* commit) {

    if(!checkCMsg(commit)){
        putString("c?????????");
        return;
    } else{

        putString("c??????????????");
        int serialNo=commit->getSerialNo();

        ////???????§Ü?????p??????????
        if(!somethingIn(pMsgList,commit->getSerialNo())){
            cMsgReadyList.push_back(commit);
            putString("?????????????p??????????c?????????????§Ò?,cMsgReadyList???§³"+to_string(cMsgReadyList.size()));
            return;
        }

        putString("c??????????????");

        ////??????????????c?????????
        cMsgNodeNos.push_back(to_string(commit->getSerialNo())+"&"+to_string(commit->getNodeNo()));

        ////?????????§Ü??c???????????2f??
        if(countMsg(cMsgNodeNos,commit->getSerialNo())==(chooseSize-1)/3*2){
            cMsgList.push_back(commit->getSerialNo());
            Msg*reply=commit;
            reply->setType("reply");
            reply->setResult(true);
            reply->setNodeNo(nodeNo);
            reply->setSystemId(systemId);
            sendReply(reply);
        }
    }
}

/**
 * ?????????request???????
 * @param remark
 */
void aloneNodeController::dealWithReadyRequest() {
    cout<<"??????????request???\n";
    for (Msg* request:requestReadyList) {
        this->dealWithRequest(request);
    }
}

/**
 * ?????????PP???????
 * @param serialNo
 */
void aloneNodeController::dealWithReadyPpMsg(int serialNo) {

    putString("??????????pp???");
    dealWithReadyMsg(ppMsgReadyList,serialNo);
}

/**
 * ?????????PP???????
 */
void aloneNodeController::dealWithReadyPpMsg() {
    putString("??????????pp???");
    dealWithReadyMsg(ppMsgReadyList);
}

/**
 * ?????????P???????
 * @param serialNo
 */
void aloneNodeController::dealWithReadyPMsg(int serialNo) {
    putString("?????????????§Ü??"+to_string(serialNo)+"p???");
    dealWithReadyMsg(pMsgReadyList,serialNo);
}

/**
 * ?????????C???????
 * @param serialNo
 */
void aloneNodeController::dealWithReadyCMsg(int serialNo) {
    putString("??????????c???,???"+to_string(cMsgReadyList.size())+"??c??????????");
    dealWithReadyMsg(cMsgReadyList,serialNo);
}

/**
 * ????????????????
 * @param msgs
 * @param serialNo
 */
void aloneNodeController::dealWithReadyMsg(vector<Msg*>& msgs,int serialNo) {
    putString("???????????????????"+to_string(msgs.size())+"???§Ü??"+to_string(serialNo));

    for (int i = 0; i < msgs.size(); ++i) {
        if(msgs.at(i)->getSerialNo()==serialNo){
            action(msgs.at(i));
            msgs.erase(find(msgs.begin(),msgs.end(),msgs.at(i)));
            i--;
        }
    }
}

/**
 * ????????????????
 * @param msgs
 */
void aloneNodeController::dealWithReadyMsg(vector<Msg*>& msgs) {
    putString("???????????????????"+to_string(msgs.size()));

    for (int i = 0; i < msgs.size(); ++i) {
            action(msgs.at(i));
            msgs.erase(find(msgs.begin(),msgs.end(),msgs.at(i)));
            i--;
    }

}

/**
 * ???????????????§Ú??????
 * @param ve
 * @param str
 * @return true : ?? false: ????
 */
bool aloneNodeController::somethingIn(vector<string> ve, string str) {
    return std::find(ve.begin(),ve.end(),str)!=ve.end();
}

/**
 * ???????????????§Ú?int????
 * @param ve
 * @param num
 * @return true : ?? false: ????
 */
bool aloneNodeController::somethingIn(vector<int> ve, int num) {
    return std::find(ve.begin(),ve.end(),num)!=ve.end();
}

/**
 * ?????map??????§Ø?????????
 * @param mp
 * @param viewNo
 * @return true : ?? false: ????
 */
bool aloneNodeController::somethingIn(map<int, bool> mp, int viewNo) {
    return mp.find(viewNo)!=mp.end();
}

/**
 * ???????????????§Ú????
 * @param ve
 * @param object
 * @return true : ?? false: ????
 */
bool aloneNodeController::objectIn(vector<Msg *> ve, Msg *object) {
    return std::find(ve.begin(),ve.end(),object)!=ve.end();
}

/**
* @param ve
 * @param viewNo
 * @return -1 : ?????? other: ¦Ë??
 */
int aloneNodeController::nodeIn(vector<aloneNodeController *> ve,int viewNo) {
    for (int i = 0; i < ve.size(); ++i) {
        if(ve.at(i)->getViewNo()==viewNo){
            return i;
        }
    }

    return -1;
}

/**
 * ??msgs?????????????????§Ü??msg
 * @param msgs
 * @param serialNo
 * @return
 */
bool aloneNodeController::MsgIn(vector<Msg *> msgs, int serialNo) {
    for (Msg* msg:msgs) {
        if(msg->getSerialNo()==serialNo){
            return true;
        }
    }
    return false;
}

/**
 * ??msg???
 * @param msg
 */
void aloneNodeController::sendMsg(Msg* msg) {
    string type=msg->getType();
    putString(type+"???????????????");
    pbftMain::broadcast(msg->toJsonStr());
}

/**
 * ????reply????
 * @param reply
 * @return
 */
int aloneNodeController::sendReply(Msg* reply) {
    putString("???????reply???");
    pbftMain::sendToNode(reply->toJsonStr(), reply->getSystemId());
    return 0;
}

/**
 * ??msg???????????????????
 * @param node
 * @param msg
 */
void aloneNodeController::pushReadMsg(aloneNodeController*node, Msg* msg) {

    string msgType = msg->getType();
    putString("????????????????????????§Ø??????????????"+msgType+"??????????????????§Ò?");
    if("request"==msgType){
        requestReadyList.push_back(msg);
        putString("request??????????????§Ò?,?????§³"+to_string(requestReadyList.size()));
    }else if("ppMsg"==msgType){
        node->ppMsgReadyList.push_back(msg);
        putString("pp??????????????§Ò?,?????§³"+to_string(node->ppMsgReadyList.size()));
    }else if("pMsg"==msgType){
        node->pMsgReadyList.push_back(msg);
        putString("p??????????????§Ò?,?????§³"+to_string(node->pMsgReadyList.size()));
    }else if("commit"==msgType){
        node->cMsgReadyList.push_back(msg);
        putString("c??????????????§Ò?,?????§³"+to_string(node->cMsgReadyList.size()));
    }
}

/**
 * ???nodes????????delete
 */
void aloneNodeController::removeHalfNodes() {
    int nodeSize=nodes.size();
    for (int i = 0; i < nodeSize/2; ++i) {
        delete nodes.at(i);
        nodes.erase(begin(nodes));
    }
}

/**
 * ???ppMsg?????????
 * @param ppMsg
 * @return
 */
bool aloneNodeController::checkPpMsg(Msg* ppMsg) {

    if (check(ppMsg)){
        ////????????????pp???
        for (int i = 0; i < ppMsgList.size(); ++i) {
            if (ppMsgList.at(i)==ppMsg->getSerialNo()){
                return false;
            }
        }
        return true;
    }else{
        return false;
    }
}

/**
 * ???pMsg?????????
 * @param pMsg
 * @return
 */
bool aloneNodeController::checkPMsg(Msg* pMsg) {
    return check(pMsg)&&!somethingIn(pMsgNodeNos,to_string(pMsg->getSerialNo())+"&"+to_string(pMsg->getNodeNo()));
}

/**
 * ???cMsg?????????
 * @param commit
 * @return
 */
bool aloneNodeController::checkCMsg(Msg *commit) {
    return check(commit)&&!somethingIn(cMsgNodeNos,
            to_string(commit->getSerialNo())+"&"+to_string(commit->getNodeNo()));
}

/**
 * ???Msg?????????
 * @param ppMsg
 * @return
 */
bool aloneNodeController::check(Msg *msg) {
    return msg->getRemark()==getHashCode(msg->getContent())&&msg->getViewNo()==viewNo
           &&msg->getSerialNo()>=lowLine&&msg->getSerialNo()<=highLine;
}


////getter??setter
int aloneNodeController::getTimes() const {
    return times;
}

void aloneNodeController::setTimes(int times) {
    aloneNodeController::times = times;
}

int aloneNodeController::getViewNo() const {
    return viewNo;
}

void aloneNodeController::setViewNo(int viewNo) {
    aloneNodeController::viewNo = viewNo;
}

/**
 * ??????
 * @param msg
 * @param nodeNo
 */
void aloneNodeController::getMsg(Msg *msg,int nodeNo) {
    nodes.at(nodeNo)->action(msg);
}

/**
 * ??¦É?????
 */
aloneNodeController::aloneNodeController() {

}

/**
 * ????????
 */
aloneNodeController::~aloneNodeController() {
    deleteMsg(ppMsgReadyList);
    deleteMsg(pMsgReadyList);
    deleteMsg(cMsgReadyList);
}

void aloneNodeController::putString(string msg) {
    cout<<msg+"\n";
}

/**
 * delete msg
 * @param msgs
 */
void aloneNodeController::deleteMsg(vector<Msg *> msgs) {
    for (Msg* msg:msgs) {
        delete msg;
    }
}

/**
 *
 * @param ve
 * @param serialNo
 * @return
 */
int aloneNodeController::countMsg(vector<string> ve, int serialNo) {
    int count=0;
    for (string str:ve) {
        if(to_string(serialNo)==str.substr(0,str.find("&"))){
            count++;
        }
    }
    return count;
}

